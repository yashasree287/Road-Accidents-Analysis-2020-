# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jtVmuPyjk290HXMQ_yHZMdpkFmOz4Tex
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/df.csv')
df

df.shape

df.head()

df.tail()

df.columns

df.info()

cat_cols = df.select_dtypes(include = 'object').columns
cat_cols

for i in cat_cols:
    print(f'{i}: {df[i].nunique()}')

for i in cat_cols:
    print(df[i].value_counts()/len(df[i])*100)
    print('')

df.isnull().sum()

df[df['Count'].isnull()]

# Let's filter out similar rows
df[(df['Million Plus Cities']=='Gwalior') & (df['Cause category']=='Impacting Vehicle/Object') &
(df['Cause Subcategory']=='Other Non')]

df.loc[df['Count'].isnull(), 'Count'] = 0

df[(df['Million Plus Cities']=='Gwalior') & (df['Cause category']=='Impacting Vehicle/Object') &
(df['Cause Subcategory']=='Other Non')]

sns.set_theme(style="darkgrid")

for col in cat_cols:
    unique_values = df[col].nunique()
    palette = sns.color_palette("viridis", n_colors=unique_values)

    plt.figure(figsize=(14, 7))
    plot = sns.countplot(data=df, x=col, palette=palette)
    plot.set_title(f'Distribution of {col}', fontsize=16, weight='bold')
    plot.set_xlabel(col, fontsize=14)
    plot.set_ylabel("Count", fontsize=14)
    plt.xticks(rotation=45, ha='right', fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

total_accidents_df = df[df['Outcome of Incident']=='Total number of Accidents']
total_accidents_df

#Sorting total accidents w.r.t million plus cities
accident_cities = total_accidents_df.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)

#Plotting Barplot
plt.figure(figsize=(20,8))
sns.barplot(x=accident_cities.index, y=accident_cities.values, palette='rocket')

plt.title("Total Number of Accidents in Million Plus Cities", fontsize=16)
plt.xlabel("City Names", fontsize=14)
plt.ylabel("Number of Accidents", fontsize=14)
plt.xticks(rotation=45, ha="right", fontsize=10)
plt.show()

#Making list of unique cause categories
accident_labels = total_accidents_df['Cause category'].unique()
accident_labels

for label in accident_labels:
    #Specific cause category of accident
    label_cat = total_accidents_df[total_accidents_df['Cause category']==label]

    #Grouping data by city for bar plot
    accidents_cat = label_cat.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)

    #Grouping data by sub-categories for pie chart
    labels_subcat = label_cat.groupby('Cause Subcategory')['Count'].sum()

    fig, axes = plt.subplots(1, 2, figsize=(26, 10))
    fig.suptitle(f"Accidents due to {label}", fontsize=20)

    #Barplot
    accidents_cat.plot(kind='bar', ax=axes[0], color='blue')
    axes[0].set_title(f"Total Number of Accidents in Cities due to {label}", fontsize=15)
    axes[0].set_xlabel("City Names")
    axes[0].set_ylabel("Number of Accidents")
    axes[0].tick_params(axis='x', rotation=45, labelsize=10)
    for tick in axes[0].get_xticklabels():
        tick.set_horizontalalignment('right')

    #Pie chart for subcategory
    labels_subcat.plot(kind='pie', ax=axes[1], autopct='%1.1f%%', startangle=90, legend=False)
    axes[1].set_title(f"Subcategories of {label}", fontsize=15)
    axes[1].set_ylabel("")

    axes[1].legend(bbox_to_anchor=(1.05, 1), loc="upper left")

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Leave space for the suptitle
    plt.show()

data = []
labels_subcat = total_accidents_df['Cause Subcategory'].unique()

for label in labels_subcat:
    labels_subcat_df = total_accidents_df[total_accidents_df['Cause Subcategory']==label]

    #top 4 cities
    top_4_cities = labels_subcat_df.groupby('Million Plus Cities')['Count'].sum().nlargest(4).index.tolist()

    data.append({
        'Cause Subcategory': label,
        'Top 4 Cities': ",".join(top_4_cities)
    })

accidents_cause_city_df = pd.DataFrame(data)
accidents_cause_city_df

num_subcategories = len(labels_subcat)
fig, axes = plt.subplots(num_subcategories, 1, figsize=(30, num_subcategories * 5))
fig.subplots_adjust(hspace=0.7)

for i, label in enumerate(labels_subcat):
    labels_subcat_df = total_accidents_df[total_accidents_df['Cause Subcategory']==label]
    subcat_accidents = labels_subcat_df.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)
    subcat_accidents.plot(
        kind='bar',
        ax=axes[i] if num_subcategories > 1 else axes,
        color='blue'
    )
    axes[i].set_title(f"City-wise distribution of Total number of accidents due to {label}")

total_injured_df = df[df['Outcome of Incident']=='Total Injured']
total_injured_df

injured_cities = total_injured_df.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)

#Plotting Barplot
plt.figure(figsize=(20,8))
sns.barplot(x=injured_cities.index, y=injured_cities.values, palette='rocket')

plt.title("Total Injured in Million Plus Cities", fontsize=16)
plt.xlabel("City Names", fontsize=14)
plt.ylabel("Number of Injured", fontsize=14)
plt.xticks(rotation=45, ha="right", fontsize=10)
plt.show()

injured_labels = total_injured_df['Cause category'].unique()
injured_labels

for label in injured_labels:
    label_cat = total_injured_df[total_injured_df['Cause category']==label]

    #Grouping data by city for bar plot
    injured_cat = label_cat.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)

    #Grouping data by sub-categories for pie chart
    labels_subcat = label_cat.groupby('Cause Subcategory')['Count'].sum()

    fig, axes = plt.subplots(1, 2, figsize=(26, 10))
    fig.suptitle(f"Injuries due to {label}", fontsize=20)

    #Barplot
    accidents_cat.plot(kind='bar', ax=axes[0], color='blue')
    axes[0].set_title(f"Total Injuries in Cities due to {label}", fontsize=15)
    axes[0].set_xlabel("City Names")
    axes[0].set_ylabel("Number of Injuries")
    axes[0].tick_params(axis='x', rotation=45, labelsize=10)
    for tick in axes[0].get_xticklabels():
        tick.set_horizontalalignment('right')

    #Pie chart for subcategory
    labels_subcat.plot(kind='pie', ax=axes[1], autopct='%1.1f%%', startangle=90, legend=False)
    axes[1].set_title(f"Subcategories of {label}", fontsize=15)
    axes[1].set_ylabel("")

    axes[1].legend(bbox_to_anchor=(1.05, 1), loc="upper left")

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

data = []
labels_subcat = total_injured_df['Cause Subcategory'].unique()

for label in labels_subcat:
    labels_subcat_df = total_injured_df[total_injured_df['Cause Subcategory']==label]

    #top 4 cities
    top_4_cities = labels_subcat_df.groupby('Million Plus Cities')['Count'].sum().nlargest(4).index.tolist()

    data.append({
        'Cause Subcategory': label,
        'Top 4 Cities': ",".join(top_4_cities)
    })

injuries_cause_city_df = pd.DataFrame(data)
injuries_cause_city_df

num_subcategories = len(labels_subcat)
fig, axes = plt.subplots(num_subcategories, 1, figsize=(30, num_subcategories * 5))
fig.subplots_adjust(hspace=0.7)

for i, label in enumerate(labels_subcat):
    labels_subcat_df = total_injured_df[total_injured_df['Cause Subcategory']==label]
    subcat_injured = labels_subcat_df.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)
    subcat_injured.plot(
        kind='bar',
        ax=axes[i] if num_subcategories > 1 else axes,
        color='blue'
    )
    axes[i].set_title(f"City-wise distribution of Total Injuries due to {label}")

total_killed_df = df[df['Outcome of Incident']=='Persons Killed']
total_killed_df

killed_cities = total_killed_df.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)

#Plotting Barplot
plt.figure(figsize=(20,8))
sns.barplot(x=killed_cities.index, y=killed_cities.values, palette='rocket')

plt.title("Total Persons Killed in Million Plus Cities", fontsize=16)
plt.xlabel("City Names", fontsize=14)
plt.ylabel("Number of People Killed", fontsize=14)
plt.xticks(rotation=45, ha="right", fontsize=10)
plt.show()

killed_labels = total_killed_df['Cause category'].unique()
killed_labels

for label in killed_labels:
    label_cat = total_killed_df[total_killed_df['Cause category']==label]

    #Grouping data by city for bar plot
    killed_cat = label_cat.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)

    #Grouping data by sub-categories for pie chart
    labels_subcat = label_cat.groupby('Cause Subcategory')['Count'].sum()

    fig, axes = plt.subplots(1, 2, figsize=(26, 10))
    fig.suptitle(f"Persons Killed due to {label}", fontsize=20)

    #Barplot
    killed_cat.plot(kind='bar', ax=axes[0], color='blue')
    axes[0].set_title(f"Total Persons Killed in Cities due to {label}", fontsize=15)
    axes[0].set_xlabel("City Names")
    axes[0].set_ylabel("Number of Persons Killed")
    axes[0].tick_params(axis='x', rotation=45, labelsize=10)
    for tick in axes[0].get_xticklabels():
        tick.set_horizontalalignment('right')

    #Pie chart for subcategory
    labels_subcat.plot(kind='pie', ax=axes[1], autopct='%1.1f%%', startangle=90, legend=False)
    axes[1].set_title(f"Subcategories of {label}", fontsize=15)
    axes[1].set_ylabel("")

    axes[1].legend(bbox_to_anchor=(1.05, 1), loc="upper left")

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

data = []
labels_subcat = total_killed_df['Cause Subcategory'].unique()

for label in labels_subcat:
    labels_subcat_df = total_killed_df[total_killed_df['Cause Subcategory']==label]

    #top 4 cities
    top_4_cities = labels_subcat_df.groupby('Million Plus Cities')['Count'].sum().nlargest(4).index.tolist()

    data.append({
        'Cause Subcategory': label,
        'Top 4 Cities': ",".join(top_4_cities)
    })

killed_cause_city_df = pd.DataFrame(data)
killed_cause_city_df



num_subcategories = len(labels_subcat)
fig, axes = plt.subplots(num_subcategories, 1, figsize=(30, num_subcategories * 5))
fig.subplots_adjust(hspace=0.7)

for i, label in enumerate(labels_subcat):
    labels_subcat_df = total_killed_df[total_killed_df['Cause Subcategory']==label]
    subcat_killed = labels_subcat_df.groupby('Million Plus Cities')['Count'].sum().sort_values(ascending=False)
    subcat_killed.plot(
        kind='bar',
        ax=axes[i] if num_subcategories > 1 else axes,
        color='blue'
    )
    axes[i].set_title(f"City-wise distribution of Total Persons killed due to {label}")

